// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ORGANIZATION
  EMPLOYEE
}

model Organization {
  id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
  email                      String                      @unique
  username                   String
  supabaseId                 String                      @unique
  role                       Role                        @default(ORGANIZATION)
  createdAt                  DateTime                    @default(now())
  employees                  Employee[]
  organizationJiraConnection OrganizationJiraConnection?
  organizationProject        OrganizationProject[]
}

model Employee {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  email                  String                  @unique
  username               String
  role                   Role                    @default(EMPLOYEE)
  supabaseId             String                  @unique
  organizationId         String                  @unique
  organization           Organization            @relation(fields: [organizationId], references: [id])
  createdAt              DateTime                @default(now())
  employeeJiraConnection EmployeeJiraConnection?
  employeeProject        EmployeeProject[]
  projectAccessRequest   ProjectAccessRequest[]
}

model OrganizationJiraConnection {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  accessToken    String
  refreshToken   String
  cloudId        String?
  tokenExpiresAt DateTime
  createdAt      DateTime     @default(now())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model EmployeeJiraConnection {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId       String
  clientSecret   String
  accessToken    String?
  refreshToken   String?
  cloudId        String?
  tokenExpiresAt DateTime?
  createdAt      DateTime  @default(now())
  employeeId     String    @unique
  employee       Employee  @relation(fields: [employeeId], references: [id])
}

model OrganizationProject {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  projectId             String                 @unique
  key                   String
  name                  String
  description           String?
  leadAccountId         String?
  projectTypeKey        String?
  url                   String?
  avatarUrl             String?
  organizationId        String                 @unique
  organization          Organization           @relation(fields: [organizationId], references: [id])
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  projectAccessRequests ProjectAccessRequest[]
}

model EmployeeProject {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId      String   @unique
  key            String
  name           String
  description    String?
  leadAccountId  String?
  projectTypeKey String?
  url            String?
  avatarUrl      String?
  employeeId     String   @unique
  employee       Employee @relation(fields: [employeeId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ProjectAccessRequest {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String              @unique
  employee   Employee            @relation(fields: [employeeId], references: [id])
  projectId  String              
  organizationProject    OrganizationProject @relation(fields: [projectId], references: [id])
  status     String              @default("IDLE")
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}
